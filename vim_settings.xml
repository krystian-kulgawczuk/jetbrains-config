<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Projects/terraform/terraform-main/main.tf" timestamp="1558957435024">
        <mark key="'" line="40" column="35" />
        <mark key="[" line="10" column="18" />
        <mark key="]" line="10" column="19" />
        <mark key="." line="10" column="19" />
        <mark key="^" line="10" column="19" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-common/src/main/java/agent/common/db/impl/DbFactoryImpl.java" timestamp="1558014297610">
        <mark key="'" line="21" column="21" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" timestamp="1559037533040">
        <mark key="'" line="109" column="116" />
        <mark key="[" line="267" column="79" />
        <mark key="]" line="267" column="79" />
        <mark key="^" line="267" column="79" />
        <mark key="." line="267" column="79" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-common/src/main/java/agent/common/security/jwt/principal/JwtUser.java" timestamp="1558001901782">
        <mark key="'" line="5" column="39" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/pom.xml" timestamp="1558338270062">
        <mark key="'" line="152" column="24" />
        <mark key="[" line="99" column="21" />
        <mark key="]" line="99" column="34" />
        <mark key="." line="99" column="34" />
        <mark key="^" line="99" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/roles.go" timestamp="1558358599487">
        <mark key="'" line="9" column="18" />
      </file>
      <file name="$USER_HOME$/Projects/temp/test-with-spring/master-package/running-integration-tests/src/integration-test/groovy/com/testwithspring/master/GroupControllerITSpec.groovy" timestamp="1557401686036">
        <mark key="'" line="23" column="40" />
        <mark key="[" line="26" column="50" />
        <mark key="]" line="26" column="50" />
        <mark key="^" line="27" column="68" />
        <mark key="." line="26" column="50" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-charts/src/main/java/portal/kec/model/MessageFactoryImpl.java" timestamp="1558012467933">
        <mark key="'" line="26" column="47" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" timestamp="1558958022595">
        <mark key="'" line="312" column="8" />
        <mark key="[" line="58" column="15" />
        <mark key="]" line="58" column="14" />
        <mark key="." line="58" column="14" />
        <mark key="^" line="58" column="14" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-cassandra-charts/src/main/java/portal/kcch/model/impl/KfMessageCharts.java" timestamp="1557991397083">
        <mark key="'" line="35" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-private-agents/main.tf" timestamp="1558958549295">
        <mark key="'" line="52" column="46" />
        <mark key="[" line="12" column="50" />
        <mark key="]" line="12" column="50" />
        <mark key="." line="12" column="50" />
        <mark key="^" line="12" column="50" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-stats/src/main/java/portal/kes/es/impl/StatsEsImpl.java" timestamp="1558010187319">
        <mark key="'" line="53" column="44" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-masters/outputs.tf" timestamp="1557734843495">
        <mark key="'" line="12" column="41" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" timestamp="1559051288442">
        <mark key="'" line="1063" column="74" />
        <mark key="[" line="750" column="4" />
        <mark key="]" line="750" column="4" />
        <mark key="^" line="750" column="4" />
        <mark key="." line="750" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-data-structure/src/main/java/agent/data/structure/charts/Charts.java" timestamp="1558010956493">
        <mark key="'" line="12" column="18" />
      </file>
      <file name="/i18n_const.go" timestamp="1559027574599" />
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-cassandra-consumer-common/src/main/java/portal/kcc/model/factory/impl/ConsumerFactoryImpl.java" timestamp="1558012585569">
        <mark key="'" line="28" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_client.go" timestamp="1559045180533">
        <mark key="'" line="109" column="18" />
        <mark key="[" line="123" column="0" />
        <mark key="]" line="123" column="0" />
        <mark key="." line="123" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg/utilities/cmd/cli.go" timestamp="1558620434214">
        <mark key="'" line="76" column="36" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-charts/src/main/java/portal/kec/view/charts/controller/ChartsController.java" timestamp="1558012579922">
        <mark key="'" line="35" column="52" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/activedirectoryservice/service.go" timestamp="1559035829856">
        <mark key="'" line="61" column="32" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-instance/main.tf" timestamp="1558959187672">
        <mark key="'" line="40" column="33" />
        <mark key="[" line="199" column="0" />
        <mark key="]" line="199" column="0" />
        <mark key="^" line="32" column="1" />
        <mark key="." line="199" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/analytics-cassandra/src/main/java/portal/cassandra/db/impl/AssetDbImpl.java" timestamp="1558009639726">
        <mark key="'" line="39" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/containerservice/service.go" timestamp="1559037626189">
        <mark key="'" line="251" column="38" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/gvc-terraform-azurerm-dcos/main.tf" timestamp="1558337323316">
        <mark key="'" line="133" column="42" />
        <mark key="[" line="124" column="30" />
        <mark key="]" line="124" column="29" />
        <mark key="^" line="124" column="29" />
        <mark key="." line="124" column="29" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/portal-schema/src/main/java/portal/schema/impl/DbImpl.java" timestamp="1558014325469">
        <mark key="'" line="23" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/gvc-terraform-null-dcos-install-remote/outputs.tf" timestamp="1557927649989">
        <mark key="'" line="2" column="120" />
        <mark key="[" line="2" column="191" />
        <mark key="]" line="2" column="188" />
        <mark key="^" line="2" column="188" />
        <mark key="." line="2" column="188" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/dev/config.env" timestamp="1559037511995">
        <mark key="[" line="63" column="18" />
        <mark key="]" line="63" column="26" />
        <mark key="^" line="63" column="26" />
        <mark key="." line="63" column="26" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-instance/meta.tf" timestamp="1558958844328" />
      <file name="$USER_HOME$/Downloads/translate/en.json" timestamp="1559051198446" />
      <file name="$USER_HOME$/Projects/terraform/terraform-azurerm-dcos/main.tf" timestamp="1558951705730">
        <mark key="[" line="162" column="90" />
        <mark key="]" line="162" column="90" />
        <mark key="." line="162" column="90" />
        <mark key="^" line="162" column="100" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg/cli/container/container.go" timestamp="1558620427398">
        <mark key="'" line="655" column="26" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-charts/src/main/java/portal/kec/model/KfMessageCharts.java" timestamp="1558012478201">
        <mark key="'" line="15" column="45" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/scripts/encrypt.py" timestamp="1558690181326" />
      <file name="$USER_HOME$/Projects/temp/test-with-spring/master-package/running-integration-tests/src/integration-test/groovy/com/testwithspring/master/GetMessageSpec.groovy" timestamp="1557404815297">
        <mark key="'" line="13" column="27" />
      </file>
      <file name="/Python Console" timestamp="1559050082267">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/resources/application-us-dev.properties" timestamp="1557999242952">
        <mark key="'" line="3" column="27" />
        <mark key="[" line="12" column="47" />
        <mark key="]" line="12" column="47" />
        <mark key="." line="12" column="47" />
        <mark key="^" line="12" column="49" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/view/stats/controller/ChartsStatsController.java" timestamp="1558444840018">
        <mark key="'" line="63" column="20" />
        <mark key="[" line="100" column="12" />
        <mark key="]" line="94" column="74" />
        <mark key="." line="94" column="74" />
        <mark key="^" line="94" column="74" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/gvc-terraform-azurerm-infrastructure/outputs.tf" timestamp="1557816674266">
        <mark key="'" line="209" column="32" />
        <mark key="[" line="210" column="1" />
        <mark key="]" line="213" column="55" />
        <mark key="." line="213" column="55" />
        <mark key="^" line="213" column="55" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg/apirest/router.go" timestamp="1558359295644">
        <mark key="'" line="67" column="92" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-charts/src/main/java/portal/kec/es/impl/EsFactoryImpl.java" timestamp="1558010749888">
        <mark key="'" line="24" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/portal-schema/src/main/java/portal/schema/impl/statement/SelectStmImpl.java" timestamp="1558014408717">
        <mark key="'" line="29" column="22" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-elasticsearch-stats/src/main/java/portal/kes/es/impl/EsFactoryImpl.java" timestamp="1557993760497">
        <mark key="'" line="24" column="25" />
      </file>
      <file name="$USER_HOME$/Downloads/translate/locale_parser.py" timestamp="1559049316146">
        <mark key="'" line="14" column="14" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/src/main/java/portal/customer/schema/impl/AssetsImpl.java" timestamp="1558009558126">
        <mark key="'" line="41" column="31" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/auth/auth.go" timestamp="1558940998954" />
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/authenticate/authenticate.go" timestamp="1559035845591">
        <mark key="'" line="70" column="65" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apistorage/handlers.go" timestamp="1558527544471">
        <mark key="'" line="156" column="38" />
      </file>
      <file name="$USER_HOME$/Projects/temp/orbital-group-service/build.gradle" timestamp="1557496188998">
        <mark key="'" line="132" column="2" />
        <mark key="[" line="126" column="1" />
        <mark key="]" line="127" column="0" />
        <mark key="." line="127" column="0" />
        <mark key="^" line="127" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/factory/impl/StatsFactoryImpl.java" timestamp="1558082711106">
        <mark key="'" line="49" column="19" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/factory/impl/ActionFactoryImpl.java" timestamp="1558008524215">
        <mark key="'" line="73" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apiactivedirectory/handlers.go" timestamp="1559036117748">
        <mark key="'" line="68" column="46" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-common/src/main/java/agent/common/security/jwt/principal/impl/JwtUserImpl.java" timestamp="1558003676084">
        <mark key="'" line="19" column="70" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/view/registration/controller/CodeRegistrationController.java" timestamp="1558090716248">
        <mark key="'" line="86" column="26" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/storagegroup/storagegroup.go" timestamp="1558531977039">
        <mark key="'" line="99" column="23" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/src/main/java/portal/customer/view/metadata/controller/OrganizationsMetadataController.java" timestamp="1557993533483">
        <mark key="'" line="52" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/impl/StandardizedR3StatsImpl.java" timestamp="1558007911625">
        <mark key="'" line="45" column="56" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/impl/RegistrationImpl.java" timestamp="1557989726997">
        <mark key="'" line="49" column="55" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/code_const.go" timestamp="1558532975133">
        <mark key="'" line="14" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/impl/ActionsImpl.java" timestamp="1558008499311">
        <mark key="'" line="31" column="26" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/stat-aggregator/src/main/java/portal/aggregator/charts/job/ChartAggregatorJob.java" timestamp="1558005724735">
        <mark key="'" line="88" column="35" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/system/system.go" timestamp="1558530110916">
        <mark key="'" line="185" column="34" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/gvc-terraform-null-dcos-install-private-agents-remote-exec/main.tf" timestamp="1558420665254">
        <mark key="'" line="52" column="36" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/api_services.go" timestamp="1558695254071">
        <mark key="'" line="157" column="33" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/analytics-cassandra/src/main/java/portal/elasticsearch/es/impl/EsFactoryImpl.java" timestamp="1558009674561">
        <mark key="'" line="23" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apidownload/handlers.go" timestamp="1558531912484">
        <mark key="'" line="69" column="42" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/portal-schema/src/main/java/portal/schema/table/Version.java" timestamp="1558014153410">
        <mark key="'" line="11" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/portal-schema/src/main/java/portal/schema/factory/StmFactory.java" timestamp="1558014328380">
        <mark key="'" line="8" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apicontainers/handlers.go" timestamp="1559037592469">
        <mark key="'" line="273" column="25" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_model.go" timestamp="1558619155135">
        <mark key="'" line="22" column="4" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-main/.terraform/modules/dcos.dcos-infrastructure/variables.tf" timestamp="1558958207109" />
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-common/src/main/java/agent/common/security/jwt/principal/userdetails/UserDetailsWrap.java" timestamp="1558012212710">
        <mark key="'" line="28" column="31" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/connection/connection.go" timestamp="1558965765941">
        <mark key="'" line="185" column="31" />
        <mark key="[" line="165" column="12" />
        <mark key="]" line="166" column="0" />
        <mark key="^" line="170" column="41" />
        <mark key="." line="166" column="0" />
      </file>
      <file name="$USER_HOME$/Downloads/translate/errors.keys" timestamp="1559051169598">
        <mark key="'" line="25" column="4" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="3" />
        <mark key="." line="0" column="3" />
        <mark key="^" line="0" column="3" />
      </file>
      <file name="$USER_HOME$/Projects/docker-devtools/ansible/roles/disks/files/scan_for_new_disks.sh" timestamp="1557842058273">
        <mark key="'" line="315" column="10" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/storageservice/service.go" timestamp="1558527546105">
        <mark key="'" line="163" column="46" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-regular/src/main/java/portal/agent/regular/model/impl/ChartsImpl.java" timestamp="1558011891853">
        <mark key="'" line="25" column="70" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/errors_model.go" timestamp="1559036123942">
        <mark key="'" line="28" column="17" />
        <mark key="[" line="172" column="7" />
        <mark key="]" line="172" column="7" />
        <mark key="." line="172" column="7" />
        <mark key="^" line="172" column="7" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-null-dcos-install-remote/main.tf" timestamp="1558615209742">
        <mark key="[" line="64" column="0" />
        <mark key="]" line="64" column="0" />
        <mark key="." line="64" column="0" />
        <mark key="^" line="65" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-data-structure/src/main/java/agent/data/structure/stats/Version6Checker.java" timestamp="1558095132149">
        <mark key="'" line="8" column="10" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="8" column="27" />
        <mark key="^" line="8" column="27" />
        <mark key="." line="8" column="27" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/analytics-cassandra/src/main/java/portal/cassandra/legacy/CassandraLegacyModelStoringService.java" timestamp="1558009653662">
        <mark key="'" line="45" column="40" />
      </file>
      <file name="$USER_HOME$/Projects/docker-devtools/ansible/roles/disks/files/prepare_disks.sh" timestamp="1557835202321">
        <mark key="'" line="200" column="8" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" timestamp="1559045408656">
        <mark key="'" line="205" column="40" />
        <mark key="[" line="827" column="115" />
      </file>
      <file name="$USER_HOME$/Downloads/translate/errors.map" timestamp="1559051145695">
        <mark key="'" line="0" column="4" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="25" column="156" />
        <mark key="." line="25" column="156" />
        <mark key="^" line="25" column="156" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/dev/upload.qs-qa-7.sh" timestamp="1558693285648">
        <mark key="'" line="20" column="36" />
      </file>
      <file name="$USER_HOME$/Downloads/translate/main.py" timestamp="1559049919970" />
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/vtl/vtl.go" timestamp="1559045463749">
        <mark key="'" line="124" column="27" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/terraform-main/.terraform/modules/dcos/docs/published/main.tf" timestamp="1558957912424" />
      <file name="/Dummy.txt" timestamp="1559050652065">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="19" />
        <mark key="." line="0" column="19" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/local/cassandra/schema.cql" timestamp="1558087860115">
        <mark key="'" line="15" column="24" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/portal-schema/src/main/java/portal/schema/table/R3Asset.java" timestamp="1558090366591">
        <mark key="'" line="63" column="17" />
      </file>
      <file name="$USER_HOME$/Projects/terraform/gvc-terraform-azurerm-infrastructure/main.tf" timestamp="1557837087290">
        <mark key="'" line="304" column="39" />
        <mark key="[" line="340" column="31" />
        <mark key="]" line="340" column="36" />
        <mark key="." line="340" column="36" />
        <mark key="^" line="340" column="36" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/agent-data-structure/src/main/java/agent/data/structure/stats/Stats.java" timestamp="1558007874746">
        <mark key="'" line="15" column="19" />
        <mark key="[" line="32" column="0" />
        <mark key="]" line="32" column="0" />
        <mark key="^" line="21" column="37" />
        <mark key="." line="32" column="0" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/kafka-cassandra-stats/src/main/java/portal/kcs/model/impl/KfMessageStats.java" timestamp="1558091613431">
        <mark key="'" line="88" column="71" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/src/main/java/portal/customer/schema/factory/impl/ModelFactoryImpl.java" timestamp="1558013637424">
        <mark key="'" line="59" column="20" />
      </file>
      <file name="$USER_HOME$/Downloads/translate/golang_parser.py" timestamp="1559050135462">
        <mark key="'" line="18" column="13" />
        <mark key="[" line="22" column="0" />
        <mark key="]" line="22" column="0" />
        <mark key="." line="22" column="0" />
        <mark key="^" line="21" column="15" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/src/main/java/portal/customer/view/asset/controller/AssetController.java" timestamp="1558009342511">
        <mark key="'" line="76" column="32" />
      </file>
      <file name="$USER_HOME$/Projects/global-cloud-view-portal/customer-subdomain/src/main/java/portal/customer/schema/factory/impl/EsFactoryImpl.java" timestamp="1558009513566">
        <mark key="'" line="31" column="20" />
      </file>
      <file name="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg/api/handlerLogin.go" timestamp="1558358341471">
        <mark key="'" line="21" column="11" />
      </file>
    </filemarks>
    <jumps>
      <jump line="64" column="31" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="25" column="7" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/errors_model.go" />
      <jump line="5" column="69" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="119" column="46" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_client.go" />
      <jump line="199" column="27" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/container/container.go" />
      <jump line="201" column="51" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/container/container.go" />
      <jump line="120" column="35" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_client.go" />
      <jump line="30" column="15" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/errors_model.go" />
      <jump line="28" column="17" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/errors_model.go" />
      <jump line="12" column="11" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_model.go" />
      <jump line="21" column="55" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_model.go" />
      <jump line="565" column="123" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="13" column="22" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_model.go" />
      <jump line="80" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="999" column="57" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="873" column="111" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="253" column="37" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/containerservice/service.go" />
      <jump line="18" column="29" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="527" column="38" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1077" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="535" column="4" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="20" column="35" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="73" column="74" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="74" column="63" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="75" column="42" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="89" column="35" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="808" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="275" column="44" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apicontainers/handlers.go" />
      <jump line="809" column="39" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="825" column="18" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="597" column="23" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="11" column="20" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/variables.tf" />
      <jump line="180" column="10" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/variables.tf" />
      <jump line="139" column="45" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="199" column="8" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="206" column="6" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="37" column="0" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="58" column="14" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="312" column="8" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-infrastructure/main.tf" />
      <jump line="87" column="33" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-instance/main.tf" />
      <jump line="137" column="70" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-instance/main.tf" />
      <jump line="40" column="33" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-instance/main.tf" />
      <jump line="52" column="46" filename="$USER_HOME$/Projects/terraform/terraform-azurerm-private-agents/main.tf" />
      <jump line="186" column="31" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/connection/connection.go" />
      <jump line="301" column="49" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/containerservice/service.go" />
      <jump line="1065" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="906" column="46" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1074" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1075" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="22" column="103" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1062" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="9" column="24" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="203" column="38" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="205" column="40" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_local.go" />
      <jump line="111" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="239" column="116" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="66" column="21" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apiactivedirectory/handlers.go" />
      <jump line="61" column="32" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/activedirectoryservice/service.go" />
      <jump line="70" column="65" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/authenticate/authenticate.go" />
      <jump line="84" column="4" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="68" column="46" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apiactivedirectory/handlers.go" />
      <jump line="626" column="4" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="76" column="29" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="224" column="116" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="227" column="55" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="9" column="50" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="109" column="116" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/router.go" />
      <jump line="273" column="25" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/apirest/apicontainers/handlers.go" />
      <jump line="251" column="38" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/service/containerservice/service.go" />
      <jump line="124" column="27" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/cli/vtl/vtl.go" />
      <jump line="0" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1079" column="40" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1076" column="72" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="663" column="27" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="120" column="4" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="121" column="27" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="110" column="36" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_client.go" />
      <jump line="109" column="18" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/utilities/cmd/cmd_client.go" />
      <jump line="536" column="11" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="14" column="14" filename="$USER_HOME$/Downloads/translate/locale_parser.py" />
      <jump line="18" column="13" filename="$USER_HOME$/Downloads/translate/golang_parser.py" />
      <jump line="1072" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1080" column="0" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="795" column="101" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="16" column="82" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="449" column="28" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="750" column="126" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1050" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1051" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1052" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1053" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1054" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="1055" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="507" column="8" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="511" column="27" filename="$USER_HOME$/Downloads/translate/errors.map" />
      <jump line="531" column="4" filename="$USER_HOME$/Downloads/translate/errors.map" />
      <jump line="1063" column="74" filename="$USER_HOME$/Projects/qorestor/qs-new-ui-api/pkg2/shared/errors/i18n_const.go" />
      <jump line="24" column="4" filename="$USER_HOME$/Downloads/translate/errors.keys" />
      <jump line="25" column="4" filename="$USER_HOME$/Downloads/translate/errors.keys" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text>C</text>
      </register>
      <register name="/" type="4">
        <text>SystemStorageLocation</text>
      </register>
      <register name="0" type="4">
        <text encoding="base64">STE4blZUTE5vQ29ubmVjdGlvbiA=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="2" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">CUkxOG5NYWludGVuYW5jZUZvcmVpZ25Db25mRGlza0NsZWFyU3VjY2VzczogICAgICAgICAgICAgICAgICAgICAge0Rlc2NyaXB0aW9uOiAiU3VjY2Vzc2Z1bGx5IGNsZWFyZWQgZm9yZWlnbiBjb25maWd1cmF0aW9uIn0sCg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIAo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmICJpdGVyYXRpb24iIGluIGxpbmUubG93ZXIoKToK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmCg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmICJpdGVyYXRpb24iIGluIGxpbmUubG93ZXIoKToK</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmIGxpbmUuZmluZAo=</text>
      </register>
      <register name=":" type="4">
        <text>59,67y</text>
      </register>
    </registers>
    <search>
      <last-search>SystemStorageLocation</last-search>
      <last-offset />
      <last-pattern>SystemStorageLocation</last-pattern>
      <last-replace>cassandra</last-replace>
      <last-substitute>private</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>variant</entry>
        <entry>smartcat</entry>
        <entry>smart</entry>
        <entry>true</entry>
        <entry>systemState</entry>
        <entry>charts</entry>
        <entry>r3_asset</entry>
        <entry>version</entry>
        <entry>private</entry>
        <entry>portal-schema</entry>
        <entry>network_interface</entry>
        <entry>nasrepl</entry>
        <entry>containers\/{name}</entry>
        <entry>addCif</entry>
        <entry>cif</entry>
        <entry>\/storage</entry>
        <entry>inputInfo</entry>
        <entry>CliContainer</entry>
        <entry>container.cannot_delete</entry>
        <entry>azurerm</entry>
        <entry>make</entry>
        <entry>CliCat</entry>
        <entry>container</entry>
        <entry>vtl</entry>
        <entry>VTL</entry>
        <entry>location</entry>
        <entry>provider</entry>
        <entry>private_agents</entry>
        <entry>kafka-agents</entry>
        <entry>kafka</entry>
        <entry>tested-oses</entry>
        <entry>I18nContainerCannotDeleteRe</entry>
        <entry>active-directory</entry>
        <entry>authenticate_or_bad</entry>
        <entry>authenticate.bad_credentials</entry>
        <entry>containers</entry>
        <entry>container.update_failed</entry>
        <entry>unable_choam</entry>
        <entry>SystemStorageLocation</entry>
      </history-search>
      <history-cmd>
        <entry>291,295y</entry>
        <entry>49,53y</entry>
        <entry>55,59d</entry>
        <entry>55,59y</entry>
        <entry>133,137y</entry>
        <entry>139,143d</entry>
        <entry>139,143y</entry>
        <entry>223,238y</entry>
        <entry>65,68y</entry>
        <entry>50,53y</entry>
        <entry>122,124y</entry>
        <entry>90,93y</entry>
        <entry>52,60y</entry>
        <entry>62,70y</entry>
        <entry>152,159y</entry>
        <entry>19</entry>
        <entry>1,4d</entry>
        <entry>35,42d</entry>
        <entry>47,56d</entry>
        <entry>59,67y</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
    </shortcut-conflicts>
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
</application>